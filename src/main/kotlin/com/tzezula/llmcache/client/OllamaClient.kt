package com.tzezula.llmcache.client

import io.github.ollama4j.OllamaAPI
import io.micrometer.core.instrument.MeterRegistry
import org.slf4j.LoggerFactory
import org.springframework.stereotype.Component
import java.util.concurrent.TimeUnit

/**
 * Client for interacting with the Ollama LLM service.
 * This client uses the OllamaAPI to generate summaries based on prompts.
 * It tracks the number of successful and failed responses, as well as the response time of the model.
 */
@Component
class OllamaClient(
    private val api: OllamaAPI,
    meterRegistry: MeterRegistry,
) : LlmClient {

    companion object {
        private const val MODEL_NAME = "llama3.2:1b"
    }

    private val logger = LoggerFactory.getLogger(this::class.java)

    // Counters for tracking successes and errors
    private val successCounter = meterRegistry.counter("ai.model.response.successes")
    private val errorCounter = meterRegistry.counter("ai.model.response.errors")

    // Timer for measuring LLM model response time
    private val modelResponseTimer = meterRegistry.timer("ai.model.response.timer")

    /**
     * Summarizes the given prompt using the LLM service.
     * Returns the summary as a String or null if an error occurs.
     *
     * @param prompt The text to summarize, along with any additional instructions.
     * If you need to cleanly separate the prompt from the user query, consider using a data class.
     * @return The summary of the prompt or null if an error occurs.
     * The summary is expected to be a concise and coherent response generated by the LLM.
     * If you need additional context in the summary, use a data class.
     */
    override suspend fun summarize(prompt: String): String? {
        return try {
            logger.info("Summarizing prompt: {}", prompt)
            // Call LLM service to get summary
            val response = api.generate(MODEL_NAME, prompt, emptyMap())
            modelResponseTimer.record(response.responseTime, TimeUnit.MILLISECONDS)
            successCounter.increment()
            response.response
        } catch (e: Exception) {
            errorCounter.increment()
            logger.error("Error summarizing prompt: {}", prompt, e)
            null
        }
    }
}
